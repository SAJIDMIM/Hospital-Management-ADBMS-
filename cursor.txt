CREATE OR REPLACE PROCEDURE get_all_admins IS
    CURSOR admin_cursor IS
        SELECT 'Ward Admin' AS AdminType, WardAdminID AS AdminID, Name
        FROM WardAdmins
        UNION
        SELECT 'Surgery Admin' AS AdminType, SurgeryAdminID AS AdminID, Name
        FROM SurgeryAdmins
        UNION
        SELECT 'Patient Admin' AS AdminType, PatientAdminID AS AdminID, Name
        FROM PatientAdmins
        UNION
        SELECT 'Doctor Admin' AS AdminType, DoctorAdminID AS AdminID, Name
        FROM DoctorAdmins;
BEGIN
    FOR admin_record IN admin_cursor LOOP
        DBMS_OUTPUT.PUT_LINE('Admin Type: ' || admin_record.AdminType || 
                             ', Admin ID: ' || admin_record.AdminID || 
                             ', Name: ' || admin_record.Name);
    END LOOP;
END;
/
CREATE OR REPLACE PROCEDURE get_ward_admin_wards(
    p_wardAdminID IN NUMBER
) IS
    CURSOR ward_cursor IS
        SELECT WardID, No_of_Patients, No_of_Beds
        FROM Ward
        WHERE WardAdminID = p_wardAdminID;
BEGIN
    FOR ward_record IN ward_cursor LOOP
        DBMS_OUTPUT.PUT_LINE('Ward ID: ' || ward_record.WardID || 
                             ', No. of Patients: ' || ward_record.No_of_Patients || 
                             ', No. of Beds: ' || ward_record.No_of_Beds);
    END LOOP;
END;
/
CREATE OR REPLACE PROCEDURE get_surgery_admin_surgeries(
    p_surgeryAdminID IN NUMBER
) IS
    CURSOR surgery_cursor IS
        SELECT SurgeryID, Surgery_Type
        FROM Surgery
        WHERE SurgeryAdminID = p_surgeryAdminID;
BEGIN
    FOR surgery_record IN surgery_cursor LOOP
        DBMS_OUTPUT.PUT_LINE('Surgery ID: ' || surgery_record.SurgeryID || 
                             ', Surgery Type: ' || surgery_record.Surgery_Type);
    END LOOP;
END;
/
CREATE OR REPLACE PROCEDURE get_patient_admin_patients(
    p_patientAdminID IN NUMBER
) IS
    CURSOR patient_cursor IS
        SELECT PatientID, Name, Age, Gender
        FROM Patient
        WHERE PatientAdminID = p_patientAdminID;
BEGIN
    FOR patient_record IN patient_cursor LOOP
        DBMS_OUTPUT.PUT_LINE('Patient ID: ' || patient_record.PatientID || 
                             ', Name: ' || patient_record.Name || 
                             ', Age: ' || patient_record.Age || 
                             ', Gender: ' || patient_record.Gender);
    END LOOP;
END;
/
CREATE OR REPLACE PROCEDURE get_doctor_admin_doctors(
    p_doctorAdminID IN NUMBER
) IS
    CURSOR doctor_cursor IS
        SELECT DoctorID, Name, Specialization
        FROM Doctor
        WHERE DoctorAdminID = p_doctorAdminID;
BEGIN
    FOR doctor_record IN doctor_cursor LOOP
        DBMS_OUTPUT.PUT_LINE('Doctor ID: ' || doctor_record.DoctorID || 
                             ', Name: ' || doctor_record.Name || 
                             ', Specialization: ' || doctor_record.Specialization);
    END LOOP;
END;
/
BEGIN
    get_ward_admin_wards(1);  -- Retrieves wards managed by WardAdmin with ID = 1
END;
/
BEGIN
    get_surgery_admin_surgeries(2);  -- Retrieves surgeries managed by SurgeryAdmin with ID = 2
END;
/


CREATE OR REPLACE PROCEDURE get_patient_admin_patients(
    p_patientAdminID IN NUMBER
) IS
    patient_cursor SYS_REFCURSOR;
    v_patientID Patient.PatientID%TYPE;
    v_name Patient.Name%TYPE;
    v_age Patient.Age%TYPE;
    v_dob Patient.DOB%TYPE;
BEGIN
    OPEN patient_cursor FOR
        SELECT PatientID, Name, Age, DOB
        FROM Patient
        WHERE PatientAdminID = p_patientAdminID;
    
    LOOP
        FETCH patient_cursor INTO v_patientID, v_name, v_age, v_dob;
        EXIT WHEN patient_cursor%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE('Patient ID: ' || v_patientID || 
                             ', Name: ' || v_name || 
                             ', Age: ' || v_age || 
                             ', DOB: ' || v_dob);
    END LOOP;

    CLOSE patient_cursor;
END;
/


CREATE OR REPLACE PROCEDURE get_doctor_admin_doctors(
    p_doctorAdminID IN NUMBER
) IS
    doctor_cursor SYS_REFCURSOR;
    v_doctorID Doctor.DoctorID%TYPE;
    v_name Doctor.Name%TYPE;
    v_specialization Doctor.Specialization%TYPE;
BEGIN
    OPEN doctor_cursor FOR
        SELECT DoctorID, Name, Specialization
        FROM Doctor
        WHERE DoctorAdminID = p_doctorAdminID;
    
    LOOP
        FETCH doctor_cursor INTO v_doctorID, v_name, v_specialization;
        EXIT WHEN doctor_cursor%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE('Doctor ID: ' || v_doctorID || 
                             ', Name: ' || v_name || 
                             ', Specialization: ' || v_specialization);
    END LOOP;

    CLOSE doctor_cursor;
END;
/

CREATE OR REPLACE PROCEDURE get_patient_payments(
    p_patientID IN NUMBER
) IS
    payment_cursor SYS_REFCURSOR;
    v_paymentID Payment.PaymentID%TYPE;
    v_invoiceNo Payment.InvoiceNo%TYPE;
    v_status Payment.Status%TYPE;
BEGIN
    OPEN payment_cursor FOR
        SELECT PaymentID, InvoiceNo, Status
        FROM Payment
        WHERE PatientID = p_patientID;
    
    LOOP
        FETCH payment_cursor INTO v_paymentID, v_invoiceNo, v_status;
        EXIT WHEN payment_cursor%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE('Payment ID: ' || v_paymentID || 
                             ', Invoice No: ' || v_invoiceNo || 
                             ', Status: ' || v_status);
    END LOOP;

    CLOSE payment_cursor;
END;
/



CREATE OR REPLACE PROCEDURE get_ward_admin_rooms(
    p_wardAdminID IN NUMBER
) IS
    room_cursor SYS_REFCURSOR;
    v_roomID Room.RoomID%TYPE;
    v_type Room.Type%TYPE;
    v_status Room.Status%TYPE;
BEGIN
    OPEN room_cursor FOR
        SELECT RoomID, Type, Status
        FROM Room
        WHERE WardAdminID = p_wardAdminID;
    
    LOOP
        FETCH room_cursor INTO v_roomID, v_type, v_status;
        EXIT WHEN room_cursor%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE('Room ID: ' || v_roomID || 
                             ', Type: ' || v_type || 
                             ', Status: ' || v_status);
    END LOOP;

    CLOSE room_cursor;
END;
/


CREATE OR REPLACE PROCEDURE get_doctor_appointments(
    p_doctorID IN NUMBER
) IS
    appointment_cursor SYS_REFCURSOR;
    v_appointmentID Appointment.AppointmentID%TYPE;
    v_appointmentDate Appointment.AppointmentDate%TYPE;
    v_appointmentTime Appointment.AppointmentTime%TYPE;
BEGIN
    OPEN appointment_cursor FOR
        SELECT AppointmentID, AppointmentDate, AppointmentTime
        FROM Appointment
        WHERE DoctorID = p_doctorID;
    
    LOOP
        FETCH appointment_cursor INTO v_appointmentID, v_appointmentDate, v_appointmentTime;
        EXIT WHEN appointment_cursor%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE('Appointment ID: ' || v_appointmentID || 
                             ', Appointment Date: ' || v_appointmentDate || 
                             ', Appointment Time: ' || v_appointmentTime);
    END LOOP;

    CLOSE appointment_cursor;
END;
/

CREATE OR REPLACE PROCEDURE get_surgery_admin_surgeries(
    p_surgeryAdminID IN NUMBER
) IS
    surgery_cursor SYS_REFCURSOR;
    v_surgeryID Surgery.SurgeryID%TYPE;
    v_surgeryType Surgery.Surgery_Type%TYPE;
BEGIN
    OPEN surgery_cursor FOR
        SELECT SurgeryID, Surgery_Type
        FROM Surgery
        WHERE SurgeryAdminID = p_surgeryAdminID;
    
    LOOP
        FETCH surgery_cursor INTO v_surgeryID, v_surgeryType;
        EXIT WHEN surgery_cursor%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE('Surgery ID: ' || v_surgeryID || 
                             ', Surgery Type: ' || v_surgeryType);
    END LOOP;

    CLOSE surgery_cursor;
END;
/

 CREATE OR REPLACE PROCEDURE get_ward_admin_wards(
    p_wardAdminID IN NUMBER
) IS
    ward_cursor SYS_REFCURSOR;
    v_wardID Ward.WardID%TYPE;
    v_noOfPatients Ward.No_Of_Patients%TYPE;
    v_noOfBeds Ward.No_Of_Beds%TYPE;
BEGIN
    OPEN ward_cursor FOR
        SELECT WardID, No_Of_Patients, No_Of_Beds
        FROM Ward
        WHERE WardAdminID = p_wardAdminID;
    
    LOOP
        FETCH ward_cursor INTO v_wardID, v_noOfPatients, v_noOfBeds;
        EXIT WHEN ward_cursor%NOTFOUND;
        
        DBMS_OUTPUT.PUT_LINE('Ward ID: ' || v_wardID || 
                             ', No of Patients: ' || v_noOfPatients || 
                             ', No of Beds: ' || v_noOfBeds);
    END LOOP;

    CLOSE ward_cursor;
END;
/
